
attribute node
comment node
text node
element node


class gives u js object which is like array but not actual array.returns html collection
we can not use foreach,map and all over it.
GetElementById, GetElementByClass, TagAllReturns, HTMLCollection, Button, QuerySelectAllReturns, NodeList NodeList is more like an array, we can only use for each on it, HTMLCollection we can't use any hof.

dom update htmlcollection will update.
same not for node list it will not update so it is static

html collection have only element node.
node collection have every node comment node,text node.
dont give id again again use combinater in queryselector

documnet.body.style.backgroundColor="pink"
appendChile (append 1 child only)
append(multiple)..
document.querySelector('img').src="you can provide"
document.querySelector('img').style.height="100px"
when ever you are creating any img plz have a habit to append it inside div so that u can easily apply styling into it.

//react notes
npm create vite@latest my-app -- --template react
cd my-app
npm install
npm run dev

📄 Short Notes: .json() in JS
Server se response JSON format wale string (text) mein aata hai, JavaScript object nahi.
.json() method us string ko JavaScript object mein convert karta hai taaki hum uska use kar saken.
Ye internally JSON.parse() use karta hai.


//updater function k 2 task hota hai change state and cause rerender.
//dom mei rerender k scene nhi tha refresh tha jo tha but i react if fetching function ki calling globally kar di ek update ke baad usstate rerender karega and file fir exicute honi start ho jaayegi ye chij fir fetch function ko call kar dega isse infinite loop start ho jaayega.
//while writing or printing list in jsx item.map(()=>(
    //never give {} react think it is js use only ()
))


---

### 🖱️ **Mouse Events**

* `click`
* `dblclick`
* `mousedown`
* `mouseup`
* `mousemove`
* `mouseenter`
* `mouseleave`
* `mouseover`
* `mouseout`
* `contextmenu`

---

### ⌨️ **Keyboard Events**

* `keydown`
* `keyup`
* `keypress` *(deprecated)*

---

### 🧾 **Form/Input Events**

* `change`
* `input`
* `focus`
* `blur`
* `submit`

document.GetElementById("root").children
document.GetElementById("root").parentElement
//if it is html collection u can use normal loop if it is ode u can use for each.

//script mei type.babel likho or root bhai ReactDOM.craeteRoot se hi hoga.niche hi App banana hai.

Sure! Here's a **short and clear JWT notes** version:

---

### ✅ **JWT (JSON Web Token) – Notes**

📦 **Structure**:

```
HEADER.PAYLOAD.SIGNATURE
```

---

### 1️⃣ **Header** (Base64)

```json
{
  "alg": "HS256",
  "typ": "JWT"
}
```

---

### 2️⃣ **Payload** (Base64)

Contains user data like:

```json
{
  "userId": "abc123",
  "email": "abc@example.com",
  "exp": 1712345678
}
```

---

### 3️⃣ **Signature**

Used to verify token:

```
HMACSHA256(header + "." + payload, secret)
```

---

### 🔐 **Why JWT?**

* Securely pass user data
* Used for authentication (login sessions)
* Can be verified without DB lookup

---

Let me know if you want Hindi + Hinglish version too!

Absolutely! Here's a clean **remember note** you can directly save in your notes:

---

### 🔐 JWT Authorization Header – Quick Reminder Note

✅ **Always write this in Postman/Thunder Client header:**

```
Key: Authorization
Value: Bearer <your_token>
```

📌 **"Bearer" is required** — if you skip it or spell it wrong (`beerer`), you’ll get:

```
Error: jwt must be provided
```

🧠 **Backend (Node.js/Express)**:

* Use: `req.headers.authorization` (lowercase only ✅)
* Even if the client sends `"Authorization"`, Express auto-converts it to lowercase.

✅ So in backend:

```js
const authHeader = req.headers.authorization;
const token = authHeader.split(' ')[1];
```

---

📌 **Remember**:

> Use **"Authorization"** (capital A) in the request.
> Use **`authorization`** (small a) in the backend.

---

Let me know if you want this as a `.txt` or `.md` file to download too!

const dotenv = require('dotenv');
dotenv.config();

const apiUrl = process.env.API_URL; // use your actual variable name (no VITE_ prefix needed)
console.log(apiUrl);
const apiURL = import.meta.env.VITE_API_URL;
console.log(apiURL);
 Only variables prefixed with VITE_ are accessible in frontend.

 ### ✅ `$project` MongoDB Aggregation Stage

`$project` tab use hota hai jab **tum output document mein sirf specific fields dikhana chahte ho** — ya naye fields banana chahte ho, ya existing fields ko modify/rename karna chahte ho.

---

### 🔧 **Use Cases of `$project`**:

#### 🔹 **1. Sirf kuch fields dikhani hain:**

```js
[
  {
    $project: {
      name: 1,
      fees: 1
    }
  }
]
```

👉 Output mein sirf `name` aur `fees` field aayenge. Baaki sab hat jaayenge.
`1` ka matlab "include this field".

---

#### 🔹 **2. Kisi field ko **hide** karna hai:**

```js
[
  {
    $project: {
      password: 0
    }
  }
]
```

👉 Bas `password` field ko hata diya. Baaki sab fields dikhengi.

---

#### 🔹 **3. Naya field banana / calculate karna:**

```js
[
  {
    $project: {
      name: 1,
      doubledFees: { $multiply: ["$fees", 2] }
    }
  }
]
```

👉 Naya field `doubledFees` ban gaya, jo `fees × 2` hai.

---

#### 🔹 **4. Nested fields access karna:**

```js
[
  {
    $project: {
      "doctor.name": 1,
      "doctor.speciality": 1
    }
  }
]
```

👉 Sirf nested object ke andar ke fields show karne ke liye.

---

### 📌 Note:

* `$project` usually aggregation pipeline ke **last stage ya middle** mein aata hai.
* Yeh sirf **document ko shape** karne ke liye hota hai, data filter karne ke liye nahi. (uske liye `$match` use karo)

---

Agar tumhara use case ho to batao, uske according main exact `$project` ka example bana dungi 💡


Great! Here's a full progression of **MongoDB Aggregation questions** — from easy to super-duper complex — based on your doctors dataset:

---

### 🟢 **Easy Level**

1. **Find all available doctors**

```js
db.doctors.aggregate([
  { $match: { available: true } }
])
```

2. **Get only the name and speciality of all doctors**

```js
db.doctors.aggregate([
  { $project: { name: 1, speciality: 1, _id: 0 } }
])
```

3. **Count total number of doctors**

```js
db.doctors.aggregate([
  { $count: "totalDoctors" }
])
```

4. **List all unique specialities**

```js
db.doctors.aggregate([
  { $group: { _id: "$speciality" } }
])
```

---

### 🟡 **Medium Level**

5. **Find average consultation fees of all doctors**

```js
db.doctors.aggregate([
  { $group: { _id: null, averageFees: { $avg: "$fees" } } }
])
```

6. **Group doctors by speciality and get count per speciality**

```js
db.doctors.aggregate([
  { $group: { _id: "$speciality", count: { $sum: 1 } } }
])
```

7. **Find doctors with more than 3 years experience**

```js
db.doctors.aggregate([
  {
    $match: {
      experience: { $regex: /^[4-9]|[1-9][0-9]/ }  // "4 Year", "5 Year", "10 Year", etc.
    }
  }
])
```

8. **Find the maximum and minimum fees charged**

```js
db.doctors.aggregate([
  {
    $group: {
      _id: null,
      maxFees: { $max: "$fees" },
      minFees: { $min: "$fees" }
    }
  }
])
```

---

### 🔵 **Advanced Level**

9. **List doctors sorted by experience (converted to number) in descending order**

```js
db.doctors.aggregate([
  {
    $addFields: {
      expNum: { $toInt: { $arrayElemAt: [{ $split: ["$experience", " "] }, 0] } }
    }
  },
  { $sort: { expNum: -1 } },
  { $project: { name: 1, speciality: 1, expNum: 1 } }
])
```

10. **For each speciality, get average fees and number of available doctors**

```js
db.doctors.aggregate([
  { $match: { available: true } },
  {
    $group: {
      _id: "$speciality",
      avgFee: { $avg: "$fees" },
      countAvailable: { $sum: 1 }
    }
  }
])
```

11. **Find doctors who charge below average fees (compared to all)**

```js
db.doctors.aggregate([
  {
    $facet: {
      all: [
        { $group: { _id: null, avgFees: { $avg: "$fees" } } }
      ],
      doctors: [
        { $project: { name: 1, fees: 1 } }
      ]
    }
  },
  {
    $project: {
      avgFees: { $arrayElemAt: ["$all.avgFees", 0] },
      doctors: 1
    }
  },
  {
    $project: {
      doctors: {
        $filter: {
          input: "$doctors",
          as: "doc",
          cond: { $lt: ["$$doc.fees", "$avgFees"] }
        }
      }
    }
  },
  { $unwind: "$doctors" },
  { $replaceRoot: { newRoot: "$doctors" } }
])
```

---

### 🔴 **Super-Duper Complex Level**

12. **Get top 2 highest-paid available doctors per speciality**

```js
db.doctors.aggregate([
  { $match: { available: true } },
  {
    $set: { speciality: { $ifNull: ["$speciality", "Unknown"] } }
  },
  {
    $sort: { speciality: 1, fees: -1 }
  },
  {
    $group: {
      _id: "$speciality",
      topDoctors: { $push: "$$ROOT" }
    }
  },
  {
    $project: {
      topDoctors: { $slice: ["$topDoctors", 2] }
    }
  },
  { $unwind: "$topDoctors" },
  { $replaceRoot: { newRoot: "$topDoctors" } }
])
```

13. **Create a dashboard-style result showing:**

* total doctors
* average experience (in years)
* highest fee charged
* number of available doctors

```js
db.doctors.aggregate([
  {
    $addFields: {
      experienceYear: { $toInt: { $arrayElemAt: [{ $split: ["$experience", " "] }, 0] } }
    }
  },
  {
    $group: {
      _id: null,
      totalDoctors: { $sum: 1 },
      avgExperience: { $avg: "$experienceYear" },
      maxFees: { $max: "$fees" },
      availableCount: {
        $sum: {
          $cond: [{ $eq: ["$available", true] }, 1, 0]
        }
      }
    }
  }
])
```

---

Want me to give a **quiz-style challenge** or convert this into **practice JSON + expected output**?

db.doctors.aggregate([
  { $project: { name: 1, speciality: 1, _id: 0 } }
])

$project stage se hum decide karte hain:
➤ Kaunse fields output mein dikhayein (1)
➤ Kaunse fields hata dein (0)